// Generated by CoffeeScript 1.6.3
(function() {
  var _arrayBufferToBase64, _makeBody, _ref, _writeFile,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _arrayBufferToBase64 = function(buffer) {
    var binary, bytes, i, len;
    binary = '';
    bytes = new Uint8Array(buffer);
    len = bytes.byteLength;
    i = 0;
    while (++i < len) {
      binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
  };

  _makeBody = function(metadata, contentType, data) {
    var boundary, close_delim, delimiter;
    boundary = '-------314159265358979323846';
    delimiter = "\r\n--" + boundary + "\r\n";
    close_delim = "\r\n--" + boundary + "--";
    return delimiter + 'Content-Type: application/json\r\n\r\n' + JSON.stringify(metadata) + delimiter + ("Content-Type: " + contentType + "\r\n") + 'Content-Transfer-Encoding: base64\r\n\r\n' + data + close_delim;
  };

  _writeFile = function(buffer, cb) {
    var body, callback, contentType, metadata, request;
    contentType = fileData.type || 'application/octet-stream';
    metadata = {
      title: fileData.name,
      mimeType: contentType
    };
    body = _makeBody(metadata, contentType, _arrayBufferToBase64(buffer));
    request = gapi.client.request({
      path: '/upload/drive/v2/files',
      method: 'POST',
      params: {
        uploadType: 'multipart'
      },
      headers: {
        'Content-Type': "multipart/mixed; boundary=\"" + boundary + "\""
      },
      body: body
    });
    if (!callback) {
      callback = function(file) {
        return console.log(file);
      };
    }
    return request.execute(callback);
  };

  BrowserFS.File.GDriveFile = (function(_super) {
    __extends(GDriveFile, _super);

    function GDriveFile() {
      _ref = GDriveFile.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    GDriveFile.prototype.sync = function(cb) {
      return _writeFile(this._buffer.buff.buffer, cb);
    };

    GDriveFile.prototype.close = function(cb) {
      return this.sync(cb);
    };

    return GDriveFile;

  })(BrowserFS.File.PreloadFile);

  BrowserFS.FileSystem.GDrive = (function(_super) {
    __extends(GDrive, _super);

    function GDrive(cb) {
      var details, doAuth;
      details = {
        client_id: '555024705616.apps.googleusercontent.com',
        scope: 'https://www.googleapis.com/auth/drive',
        immediate: true
      };
      doAuth = function(result) {
        if (result && !result.error) {
          return console.log('Authenticated successfully');
        } else {
          details.immediate = false;
          return gapi.auth.authorize(details, doAuth);
        }
      };
      gapi.auth.authorize(details, doAuth);
      if (cb) {
        cb(this);
      }
    }

    GDrive.prototype.getName = function() {
      return 'Google Drive';
    };

    GDrive.isAvailable = function() {
      return true;
    };

    GDrive.prototype.isReadOnly = function() {
      return false;
    };

    GDrive.prototype.supportsSymlinks = function() {
      return false;
    };

    GDrive.prototype.supportsProps = function() {
      return false;
    };

    GDrive.prototype.supportsSynch = function() {
      return false;
    };

    GDrive.prototype.empty = function(cb) {};

    GDrive.prototype.rename = function(oldPath, newPath, cb) {};

    GDrive.prototype.stat = function(path, isLstat, cb) {};

    GDrive.prototype.open = function(path, flags, mode, cb) {};

    GDrive.prototype.unlink = function(path, cb) {};

    GDrive.prototype.rmdir = function(path, cb) {};

    GDrive.prototype.mkdir = function(path, mode, cb) {};

    GDrive.prototype.readdir = function(path, cb) {};

    return GDrive;

  })(BrowserFS.FileSystem);

}).call(this);
